generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String    @unique
  password  String?
  logoUrl       String?
  primaryColor  String?
  fontFamily    String?
  brandingSyncWithTheme Boolean @default(false)
  useThemeForPdf Boolean @default(false)
  themePrimary  String?  @default("#6366F1")
  themeAccent   String?  @default("#22D3EE")
  themeMode     String?  @default("dark")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  invoices  Invoice[]
}

model Invoice {
  id        String         @id @default(cuid())
  number    String         @unique
  client    String
  items     Json
  subtotal  Int
  tax       Int
  total     Int
  status    InvoiceStatus  @default(DRAFT)
  issuedAt  DateTime
  dueAt     DateTime?
  paidAt    DateTime?
  notes     String?

  userId    String
  user      User           @relation(fields: [userId], references: [id])

  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  UNPAID
  OVERDUE
}

model OptimizationLog {
  id         String              @id @default(cuid())
  route      String
  change     String
  impact     String
  confidence Float               @default(0.7)
  status     OptimizationStatus  @default(PENDING)
  actor      String              @default("system")
  notes      String?
  rollback   Boolean             @default(false)
  deltaImpact Float              @default(0)
  evalConfidence Float           @default(0.7)
  policyStatus   PolicyStatus    @default(ALLOWED)
  policyReason   String?
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  explanations ExplanationLog[]
}

enum OptimizationStatus {
  PENDING
  APPLIED
  REJECTED
}

model ExplanationLog {
  id                String        @id @default(cuid())
  recommendationId  String
  route             String
  why               String
  context           String?
  dataBasis         Json
  confidence        Float
  policyStatus      PolicyStatus  @default(ALLOWED)
  trustScore        Float         @default(0)
  actor             String        @default("system")
  createdAt         DateTime      @default(now())
  metadata          Json?

  recommendation OptimizationLog @relation(fields: [recommendationId], references: [id], onDelete: Cascade)
}

enum PolicyStatus {
  ALLOWED
  REVIEW
  BLOCKED
}

model LearningProfile {
  route            String   @id
  successRate      Float    @default(0)
  avgImpact        Float    @default(0)
  confidenceWeight Float    @default(0.7)
  totalEvaluations Int      @default(0)
  lastLcpP95       Float    @default(0)
  lastInpP95       Float    @default(0)
  lastApiLatencyP95 Float   @default(0)
  lastErrorRate    Float    @default(0)
  lastEval         DateTime?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model AgentEventLog {
  id                String   @id @default(cuid())
  traceId           String
  eventType         String
  sourceAgent       String
  targetAgent       String?
  priority          Int
  summary           String
  payload           Json
  recommendationId  String?
  createdAt         DateTime @default(now())

  @@index([traceId])
  @@index([recommendationId])
}

model AgentPriority {
  id          String   @id @default(cuid())
  agent       String
  weight      Float
  confidence  Float   @default(0.5)
  rationale   String?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([agent])
  @@unique([agent])
}

model RecoveryLog {
  id                String   @id @default(cuid())
  agent             String
  action            String
  reason            String?
  traceId           String?
  trustScoreBefore  Float?
  trustScoreAfter   Float?
  metadata          Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([agent])
  @@index([createdAt])
}
